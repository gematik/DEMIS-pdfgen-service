{{/* Check required values and define variables */}}
{{- $dockerRepository := .Values.required.image.repository | required ".Values.required.image.repository is required." -}}
{{- $dockerImage := .Values.required.image.name | required ".Values.required.image.name is required." -}}
{{- $dockerTag := .Values.required.image.tag | default .Chart.AppVersion -}}
{{- $customEnvVars := .Values.customEnvVars -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pdfgen-service.fullversionname" . }}
  labels:
    {{- include "pdfgen-service.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pdfgen-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pdfgen-service.selectorLabels" . | nindent 8 }}
        {{- include "pdfgen-service.deploymentLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pdfgen-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      # Add writable volumes
      volumes:
        - name: tmp-volume
          emptyDir: {}
        {{- if .Values.debug.enable }}
        - name: jfr-volume
          emptyDir: {}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ $dockerRepository }}/{{ $dockerImage }}:{{ $dockerTag }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- /* If entrypoint and parameters are both defined, configure them */ -}}
          {{- if .Values.application.entrypoint }}
          {{- if .Values.application.parameters }}
          {{- with .Values.application.entrypoint }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.application.parameters }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          {{- end }}
          # Set the Environment Variables for the container
          env:
            - name: "SERVER_PORT"
              value: "8080"
            - name: "TZ"
              value: "Europe/Berlin"
            {{- if eq (.Values.customEnvVars.FEATURE_FLAG_NEW_API_ENDPOINTS | toString) "true" }}
            - name: "DEMIS_NETWORK_FHIR_UI_DATA_MODEL_TRANSLATION_SERVICE_CONTEXT_PATH"
              value: "/"
            {{- end }}
            {{- if .Values.debug.enable }}
            - name: "JAVA_TOOL_OPTIONS"
              value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:9000"
            {{- end }}
            {{- if $customEnvVars }}
            # Custom Environment Variables
            {{- range $_, $key := keys $customEnvVars | sortAlpha }}
            - name: {{ $key | quote }}
              value: {{ get $customEnvVars $key | quote }}
            {{- end }}
            {{- end }}
          # Mount Volumes in container
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            {{- if .Values.debug.enable }}
            - name: jfr-volume
              mountPath: /jfrdump
            {{- end }}
          # Ports to be exposed from the container
          ports:
            - name: pdf-port
              containerPort: 8080
              protocol: TCP
            {{- if .Values.debug.enable }}
            - name: pdf-debug
              containerPort: 9000
              protocol: TCP
            {{- end }}
          # Performs checks to verify that the application is successfully started
          # The Application is marked as failed after periodSeconds*failureThreshold seconds
          startupProbe:
            httpGet:
              path: /actuator/health
              port: pdf-port
            failureThreshold: 10
            periodSeconds: 30
          # Use SpringBoot Actuator Liveness Chech
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: pdf-port
            failureThreshold: 3
            periodSeconds: 30
          # Use SpringBoot Actuator Readiness Chech
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: pdf-port
            failureThreshold: 5
            periodSeconds: 10
          {{- with .Values.resources }}
          # Define Limits and Requested Resources (CPU/RAM)
          resources:
          {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ include "pdfgen-service.name" . }}
              - key: version
                operator: In
                values:
                - {{ .Chart.AppVersion | quote }}
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
